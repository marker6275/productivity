{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mkli6\\\\Documents\\\\productivity\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport ReactPlayer from 'react-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null); // The state for our timer\n\n  const [timer, setTimer] = useState('00:00:00');\n\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n\n  const startTimer = e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the beginning of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n    setTimer('00:03:10'); // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date(); // This is where you need to adjust if \n    // you entend to add more time\n\n    deadline.setSeconds(deadline.getSeconds() + Ref.current);\n    return deadline;\n  }; // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n  // We put empty array to act as componentDid\n  // mount only\n\n\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []); // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Player\",\n      children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        url: \"https://www.youtube.com/watch?v=1tm4ZQHFsk8\",\n        controls: \"YouTube\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HPeaHJ9UVwlp0EkypzcTPI/d1Lw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactPlayer","App","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","onClickReset"],"sources":["C:/Users/mkli6/Documents/productivity/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'; \nimport './App.css';\nimport ReactPlayer from 'react-player';\n\nfunction App() {\n  // We need ref in this, because we are dealing\n    // with JS setInterval to keep track of it and\n    // stop it when needed\n    const Ref = useRef(null);\n  \n    // The state for our timer\n    const [timer, setTimer] = useState('00:00:00');\n  \n  \n    const getTimeRemaining = (e) => {\n        const total = Date.parse(e) - Date.parse(new Date());\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n        return {\n            total, hours, minutes, seconds\n        };\n    }\n  \n  \n    const startTimer = (e) => {\n        let { total, hours, minutes, seconds } \n                    = getTimeRemaining(e);\n        if (total >= 0) {\n  \n            // update the timer\n            // check if less than 10 then we need to \n            // add '0' at the beginning of the variable\n            setTimer(\n                (hours > 9 ? hours : '0' + hours) + ':' +\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\n                + (seconds > 9 ? seconds : '0' + seconds)\n            )\n        }\n    }\n  \n  \n    const clearTimer = (e) => {\n  \n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next    \n        setTimer('00:03:10');\n  \n        // If you try to remove this line the \n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (Ref.current) clearInterval(Ref.current);\n        const id = setInterval(() => {\n            startTimer(e);\n        }, 1000)\n        Ref.current = id;\n    }\n  \n    const getDeadTime = () => {\n        let deadline = new Date();\n  \n        // This is where you need to adjust if \n        // you entend to add more time\n        deadline.setSeconds(deadline.getSeconds() + Ref.current);\n        return deadline;\n    }\n  \n    // We can use useEffect so that when the component\n    // mount the timer will start as soon as possible\n  \n    // We put empty array to act as componentDid\n    // mount only\n    useEffect(() => {\n        clearTimer(getDeadTime());\n    }, []);\n  \n    // Another way to call the clearTimer() to start\n    // the countdown is via action event from the\n    // button first we create function to be called\n    // by the button\n    const onClickReset = () => {\n        clearTimer(getDeadTime());\n    }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Player\">\n      <ReactPlayer\n      url=\"https://www.youtube.com/watch?v=1tm4ZQHFsk8\"\n      controls=\"YouTube\" />\n      </div>\n      <h2>{timer}</h2>\n            <button onClick={onClickReset}>Reset</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}