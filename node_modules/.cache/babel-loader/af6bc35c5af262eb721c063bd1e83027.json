{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mkli6\\\\Documents\\\\productivity\\\\src\\\\Fiver.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Fiver = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null); // The state for our timer\n\n  const [timer, setTimer] = useState('00:00:00');\n\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n\n  const startTimer = e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the beginning of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n\n  const stopTimer = e => {\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  const playTimer = () => {\n    _s();\n\n    useEffect(() => {\n      clearTimer(getDeadTime());\n    }, []);\n  };\n\n  _s(playTimer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n    setTimer('00:05:00'); // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date(); // This is where you need to adjust if \n    // you entend to add more time\n\n    deadline.setSeconds(deadline.getSeconds() + 300);\n    return deadline;\n  }; // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n  // We put empty array to act as componentDid\n  // mount only\n\n\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []); // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: playTimer,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopTimer,\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearTimer,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Fiver, \"HPeaHJ9UVwlp0EkypzcTPI/d1Lw=\");\n\n_c = Fiver;\nexport default Fiver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fiver\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Fiver","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","stopTimer","current","clearInterval","id","setInterval","playTimer","clearTimer","getDeadTime","deadline","setSeconds","getSeconds","onClickReset"],"sources":["C:/Users/mkli6/Documents/productivity/src/Fiver.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\n  \r\n  \r\nconst Fiver = () => {\r\n  \r\n    // We need ref in this, because we are dealing\r\n    // with JS setInterval to keep track of it and\r\n    // stop it when needed\r\n    const Ref = useRef(null);\r\n  \r\n    // The state for our timer\r\n    const [timer, setTimer] = useState('00:00:00');\r\n  \r\n  \r\n    const getTimeRemaining = (e) => {\r\n        const total = Date.parse(e) - Date.parse(new Date());\r\n        const seconds = Math.floor((total / 1000) % 60);\r\n        const minutes = Math.floor((total / 1000 / 60) % 60);\r\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\r\n        return {\r\n            total, hours, minutes, seconds\r\n        };\r\n    }\r\n  \r\n  \r\n    const startTimer = (e) => {\r\n        let { total, hours, minutes, seconds } \r\n                    = getTimeRemaining(e);\r\n        if (total >= 0) {\r\n  \r\n            // update the timer\r\n            // check if less than 10 then we need to \r\n            // add '0' at the beginning of the variable\r\n            setTimer(\r\n                (hours > 9 ? hours : '0' + hours) + ':' +\r\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\r\n                + (seconds > 9 ? seconds : '0' + seconds)\r\n            )\r\n        }\r\n    }\r\n  \r\n    const stopTimer = (e) => {\r\n        if (Ref.current) clearInterval(Ref.current);\r\n        const id = setInterval(() => { startTimer(e); }, 1000)\r\n        Ref.current = id;\r\n    }\r\n\r\n    const playTimer = () => {\r\n        useEffect(() => {\r\n            clearTimer(getDeadTime());\r\n        }, []);\r\n\r\n\r\n    }\r\n\r\n    const clearTimer = (e) => {\r\n  \r\n        // If you adjust it you should also need to\r\n        // adjust the Endtime formula we are about\r\n        // to code next    \r\n        setTimer('00:05:00');\r\n  \r\n        // If you try to remove this line the \r\n        // updating of timer Variable will be\r\n        // after 1000ms or 1sec\r\n        if (Ref.current) clearInterval(Ref.current);\r\n        const id = setInterval(() => { startTimer(e); }, 1000)\r\n        Ref.current = id;\r\n    }\r\n  \r\n    const getDeadTime = () => {\r\n        let deadline = new Date();\r\n  \r\n        // This is where you need to adjust if \r\n        // you entend to add more time\r\n        deadline.setSeconds(deadline.getSeconds() + 300);\r\n        return deadline;\r\n    }\r\n  \r\n    // We can use useEffect so that when the component\r\n    // mount the timer will start as soon as possible\r\n  \r\n    // We put empty array to act as componentDid\r\n    // mount only\r\n      useEffect(() => {\r\n          clearTimer(getDeadTime());\r\n      }, []);\r\n  \r\n    // Another way to call the clearTimer() to start\r\n    // the countdown is via action event from the\r\n    // button first we create function to be called\r\n    // by the button\r\n    const onClickReset = () => {\r\n        clearTimer(getDeadTime());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{timer}</h2>\r\n            <button onClick={playTimer}>Start</button>\r\n            <button onClick={stopTimer}>Pause</button>\r\n            <button onClick={clearTimer}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default Fiver;"],"mappings":"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"},"metadata":{},"sourceType":"module"}